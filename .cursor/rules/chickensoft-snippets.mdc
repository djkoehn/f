---
description: snippets to enhance chickensoft code generation.
globs: .cs
alwaysApply: false
---
{
	"Chickensoft Service Registration": {
		"prefix": "ckservice",
		"body": [
			"Service.Register<I${1:ServiceName}, ${1:ServiceName}>();"
		],
		"description": "Register a Chickensoft service"
	},
	"Chickensoft Dependency Injection": {
		"prefix": "ckinject",
		"body": [
			"public ${1:ClassName}(${2:IServiceType} ${3:service}) {",
			"    this.${3:service} = ${3:service};",
			"}"
		],
		"description": "Constructor Dependency Injection"
	},
	"Chickensoft State Machine": {
		"prefix": "ckstate",
		"body": [
			"public class ${1:StateName} : State<${2:ContextType}> {",
			"    public override void Enter(${2:ContextType} context) {",
			"        ${0:// On enter state}",
			"    }",
			"",
			"    public override void Exit(${2:ContextType} context) {",
			"        ${0:// On exit state}",
			"    }",
			"}"
		],
		"description": "Chickensoft state machine template"
	},
	"Chickensoft Event Bus Publish": {
		"prefix": "ckpublish",
		"body": [
			"EventBus.Publish(new ${1:EventType}(${2:args}));"
		],
		"description": "Publish an event"
	},
	"Chickensoft Event Bus Subscribe": {
		"prefix": "cksubscribe",
		"body": [
			"EventBus.Subscribe<${1:EventType}>(On${1:EventType});",
			"",
			"void On${1:EventType}(${1:EventType} e) {",
			"    ${0:// Handle event}",
			"}"
		],
		"description": "Subscribe to an event"
	},
	"Chickensoft Command Pattern": {
		"prefix": "ckcommand",
		"body": [
			"public class ${1:CommandName} : ICommand {",
			"    public void Execute() {",
			"        ${0:// Command execution logic}",
			"    }",
			"}"
		],
		"description": "Chickensoft ICommand implementation"
	},
	"Chickensoft Singleton Service": {
		"prefix": "cksingleton",
		"body": [
			"Service.Singleton<I${1:ServiceName}, ${1:ServiceName}>();"
		],
		"description": "Register a singleton service"
	}
}