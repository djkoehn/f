---
description: snippets to enhance godot-csharp generation.
globs: .cs
alwaysApply: false
---
{
	"Godot Node Class": {
		"prefix": "gdclass",
		"body": [
			"using Godot;",
			"using System;",
			"",
			"public partial class ${1:ClassName} : Node {",
			"    public override void _Ready() {",
			"        base._Ready();",
			"        ${0:// Initialization code here}",
			"    }",
			"",
			"    public override void _Process(double delta) {",
			"        ${0:// Game logic here}",
			"    }",
			"}"
		],
		"description": "Base class for Godot Node in C#"
	},
	"Godot Ready Method": {
		"prefix": "gdready",
		"body": [
			"public override void _Ready() {",
			"    base._Ready();",
			"    $\"[NodePath]\".As<NodeType>()?.Method();",
			"}"
		],
		"description": "Override _Ready() with NodePath lookup"
	},
	"Godot Process Method": {
		"prefix": "gdprocess",
		"body": [
			"public override void _Process(double delta) {",
			"    ${0:// Frame update logic here}",
			"}"
		],
		"description": "Override _Process() for frame updates"
	},
	"Godot Input Handling": {
		"prefix": "gdinput",
		"body": [
			"public override void _Input(InputEvent @event) {",
			"    if (@event.IsActionPressed(\"${1:action_name}\")) {",
			"        ${0:// Handle input action}",
			"    }",
			"}"
		],
		"description": "Handle input actions"
	},
	"Godot Signal Connection": {
		"prefix": "gdsignal",
		"body": [
			"$\"[NodePath]\".Connect(\"${1:signal_name}\", new Callable(this, nameof(${2:MethodName})));",
			"void ${2:MethodName}(${3:SignalArgs}) {",
			"    ${0:// Handle signal}",
			"}"
		],
		"description": "Connect a signal with a corresponding handler"
	},
	"Godot Timer Setup": {
		"prefix": "gdtimer",
		"body": [
			"var timer = new Timer { WaitTime = ${1:1.0}, OneShot = ${2:true} };",
			"AddChild(timer);",
			"timer.Timeout += ${3:OnTimeout};",
			"timer.Start();",
			"",
			"void ${3:OnTimeout}() {",
			"    ${0:// Timer action}",
			"}"
		],
		"description": "Setup and start a Timer node"
	},
	"Godot Exported Variable": {
		"prefix": "gdexport",
		"body": [
			"[Export] public ${1:int} ${2:VariableName} { get; set; } = ${3:0};"
		],
		"description": "Exported variable for Inspector"
	},
	"Godot Scene Change": {
		"prefix": "gdscenechange",
		"body": [
			"var nextScene = (PackedScene)GD.Load(\"res://scenes/${1:SceneName}.tscn\");",
			"GetTree().ChangeSceneToPacked(nextScene);"
		],
		"description": "Change scenes in Godot"
	},
	"Godot NodePath Shortcut": {
		"prefix": "gdnodepath",
		"body": [
			"private ${1:NodeType} ${2:nodeName} => GetNode<${1:NodeType}>(\"${3:NodePath}\");"
		],
		"description": "Shortcut for NodePath lookup"
	}
}