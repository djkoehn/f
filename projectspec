# F â€“ A Node-Based Baseball Roguelike Game

## Project Structure

### Root Files
- `GlobalUsings.cs`: Global using directives
- `README.md`: Project documentation
- `project.godot`: Godot project configuration
- `icon.svg`: Project icon
- `godot.log`: Godot logging

### Assets (`assets/`)
- `audio/`: Sound effects and music
- `fonts/`: Typography assets
- `images/`: Visual assets and sprites
- `shaders/`: Shader files for visual effects

### Scenes (`scenes/`)
- `Main.tscn`: Primary game scene
- `Blocks/`: Block-specific scenes
  - `Input.tscn`: Input block scene
  - `Output.tscn`: Output block scene
  - `Add.tscn`: Add operation block scene
- `UI/`: Interface scenes
- `Utils/`: Utility scenes including AudioManager

## Core Architecture

### Block System

#### Block Types
1. Interface Layer:
   - `IBlock`: Interface for stationary blocks
     - Used by Input and Output blocks
     - Defines basic block functionality
     - Socket access and token processing

2. Block Hierarchy:
   - Stationary Blocks (IBlock implementers):
     - `Input`: Generates tokens, fixed position
     - `Output`: Collects tokens, fixed position
   - Dynamic Blocks:
     - `BaseBlock`: Base for all placeable blocks
       - Inherits Node2D, implements IBlock
       - Full dragging and connection support
       - Manages block state (InToolbar/Dragging/Placed/Connected)
     - Operation Blocks (inherit BaseBlock):
       - `Add`: Adds fixed value to tokens
       - Future operation blocks

#### Socket System
- Node2D-based socket architecture
- Socket Types:
  - Input Socket: "BlockInputSocket"
  - Output Socket: "BlockOutputSocket"
- Socket Distribution:
  - Input Block (IBlock): Output socket only
  - Output Block (IBlock): Input socket only
  - BaseBlock derivatives: Both sockets

### Connection System

#### Core Components
1. `ConnectionManager`:
   - Manages active connections
   - Maps blocks to pipes
   - Handles pipe detection
   - Manages Input->Block->Output flow

2. `ConnectionPipe`:
   - Visual representation of connections
   - Stores IBlock endpoints
   - Precise curve-based detection
   - Bezier curve visualization

3. `ConnectionFactory`:
   - Creates standard connections
   - Specialized pipe rewiring
   - Socket validation
   - Block compatibility checks

4. `ConnectionValidator`:
   - Bounds checking
   - Type compatibility
   - Rewiring validation

#### Connection Flow
1. Initial Setup:
   - Direct Input->Output connection
   - Single pipe between stationary blocks

2. Block Insertion:
   - BaseBlock inserted into existing pipe
   - Validate insertion point
   - Split connection:
     1. Input->BaseBlock pipe
     2. BaseBlock->Output pipe
   - Update block states
   - Maintain visual continuity

3. Pipe Detection:
   - Curve-based hit detection
   - Precise distance calculations
   - Visual feedback on hover

### Game Management (`F.Game.Core`)

1. `GameManager`:
   - Central game state
   - System coordination
   - Block management

2. `Inventory`:
   - Block type storage
   - Block availability
   - Block metadata

3. `BlockInteractionManager`:
   - Input handling
   - Block selection
   - Drag operations

4. `BlockFactory`:
   - Block instantiation
   - Block configuration
   - Scene management

### UI System (`F.Game.Toolbar`)

1. Core Components:
   - `Toolbar`: Main toolbar container
   - `ToolbarBlockContainer`: Block layout
   - `ToolbarVisuals`: Visual representation

2. Block Management:
   - `ToolbarBlockManager`: Block system
   - `ToolbarBlockSlot`: Individual slots
   - `ToolbarBlockFactory`: Block creation

### Utility Layer (`F.Utils.Helpers`)

1. Connection Utilities:
   - `ConnectionHelper`: Connection operations
   - `PipeRewiringHelper`: Rewiring logic
   - `PipeCurveCalculator`: Curve math

2. Input Handling:
   - `InputHelper`: Event processing
   - `DragHelper`: Drag operations
   - `ToolbarHelper`: Toolbar interactions

3. Animation:
   - `TweenHelper`: Animation utilities
   - `ToolbarHoverAnimation`: UI animations

## Game Mechanics

### Token System
- 3 tokens per round
- SPACE to spawn token
- Value modification through blocks
- Collection at output for scoring

### Controls
- SPACE: Token spawn
- Left Click: Block manipulation
- Right Click: Return to toolbar

### Block Operations
1. Input (Green, IBlock):
   - Fixed position
   - Token generation
   - Initial value setting

2. Operation (Blue/Purple, BaseBlock):
   - Draggable
   - Value modification
   - Mathematical operations

3. Output (Red, IBlock):
   - Fixed position
   - Token collection
   - Score calculation

## Configuration System

### Block Configuration
- `BlockConfig`: Block-specific settings
- `PipeConfig`: Connection pipe settings
- `TokenConfig`: Token behavior settings
- `ToolbarConfig`: UI component settings
- `ZIndexConfig`: Visual layer management

## Audio System

### Sound Management
- `AudioManager`: Central audio control
- `BlockSoundPlayer`: Block-specific sounds
- `TokenSoundPlayer`: Token-specific sounds

## Multi-Channel Processing (MCP)

### Benefits
- Independent processing channels
- Improved performance
- Scalable architecture
- Flexible event handling
- Enhanced debugging
- Responsive gameplay

### Implementation
- Separate managers for different systems
- Event-driven communication
- State management per channel
- Synchronized updates
- Performance optimization 